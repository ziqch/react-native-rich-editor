diff --git a/node_modules/quill-mention/dist/quill.mention.esm.js b/node_modules/quill-mention/dist/quill.mention.esm.js
index f8f3542..17e975d 100644
--- a/node_modules/quill-mention/dist/quill.mention.esm.js
+++ b/node_modules/quill-mention/dist/quill.mention.esm.js
@@ -1,5 +1,3 @@
-import Quill from 'quill';
-
 function _classCallCheck(instance, Constructor) {
   if (!(instance instanceof Constructor)) {
     throw new TypeError("Cannot call a class as a function");
@@ -297,128 +295,131 @@ function hasValidMentionCharIndex(mentionCharIndex, text, isolateChar) {
   return false;
 }
 
-var Embed = Quill["import"]("blots/embed");
+var Mention = /*#__PURE__*/function () {
+  function Mention(quill, options) {
+    var Quill = window.Quill;
 
-var MentionBlot = /*#__PURE__*/function (_Embed) {
-  _inherits(MentionBlot, _Embed);
+    var Embed = Quill["import"]("blots/embed");
 
-  var _super = _createSuper(MentionBlot);
+    var MentionBlot = /*#__PURE__*/function (_Embed) {
+      _inherits(MentionBlot, _Embed);
 
-  function MentionBlot(scroll, node) {
-    var _this;
+      var _super = _createSuper(MentionBlot);
 
-    _classCallCheck(this, MentionBlot);
+      function MentionBlot(scroll, node) {
+        var _this;
 
-    _this = _super.call(this, scroll, node);
+        _classCallCheck(this, MentionBlot);
 
-    _defineProperty(_assertThisInitialized(_this), "hoverHandler", void 0);
+        _this = _super.call(this, scroll, node);
 
-    _defineProperty(_assertThisInitialized(_this), "hoverHandler", void 0);
+        _defineProperty(_assertThisInitialized(_this), "hoverHandler", void 0);
 
-    _this.clickHandler = null;
-    _this.hoverHandler = null;
-    _this.mounted = false;
-    return _this;
-  }
+        _defineProperty(_assertThisInitialized(_this), "hoverHandler", void 0);
 
-  _createClass(MentionBlot, [{
-    key: "attach",
-    value: function attach() {
-      _get(_getPrototypeOf(MentionBlot.prototype), "attach", this).call(this);
-
-      if (!this.mounted) {
-        this.mounted = true;
-        this.clickHandler = this.getClickHandler();
-        this.hoverHandler = this.getHoverHandler();
-        this.domNode.addEventListener("click", this.clickHandler, false);
-        this.domNode.addEventListener("mouseenter", this.hoverHandler, false);
+        _this.clickHandler = null;
+        _this.hoverHandler = null;
+        _this.mounted = false;
+        return _this;
       }
-    }
-  }, {
-    key: "detach",
-    value: function detach() {
-      _get(_getPrototypeOf(MentionBlot.prototype), "detach", this).call(this);
 
-      this.mounted = false;
+      _createClass(MentionBlot, [{
+        key: "attach",
+        value: function attach() {
+          _get(_getPrototypeOf(MentionBlot.prototype), "attach", this).call(this);
+
+          if (!this.mounted) {
+            this.mounted = true;
+            this.clickHandler = this.getClickHandler();
+            this.hoverHandler = this.getHoverHandler();
+            this.domNode.addEventListener("click", this.clickHandler, false);
+            this.domNode.addEventListener("mouseenter", this.hoverHandler, false);
+          }
+        }
+      }, {
+        key: "detach",
+        value: function detach() {
+          _get(_getPrototypeOf(MentionBlot.prototype), "detach", this).call(this);
 
-      if (this.clickHandler) {
-        this.domNode.removeEventListener("click", this.clickHandler);
-        this.clickHandler = null;
-      }
-    }
-  }, {
-    key: "getClickHandler",
-    value: function getClickHandler() {
-      var _this2 = this;
+          this.mounted = false;
 
-      return function (e) {
-        var event = _this2.buildEvent("mention-clicked", e);
+          if (this.clickHandler) {
+            this.domNode.removeEventListener("click", this.clickHandler);
+            this.clickHandler = null;
+          }
+        }
+      }, {
+        key: "getClickHandler",
+        value: function getClickHandler() {
+          var _this2 = this;
 
-        window.dispatchEvent(event);
-        e.preventDefault();
-      };
-    }
-  }, {
-    key: "getHoverHandler",
-    value: function getHoverHandler() {
-      var _this3 = this;
+          return function (e) {
+            var event = _this2.buildEvent("mention-clicked", e);
 
-      return function (e) {
-        var event = _this3.buildEvent('mention-hovered', e);
+            window.dispatchEvent(event);
+            e.preventDefault();
+          };
+        }
+      }, {
+        key: "getHoverHandler",
+        value: function getHoverHandler() {
+          var _this3 = this;
 
-        window.dispatchEvent(event);
-        e.preventDefault();
-      };
-    }
-  }, {
-    key: "buildEvent",
-    value: function buildEvent(name, e) {
-      var event = new Event(name, {
-        bubbles: true,
-        cancelable: true
-      });
-      event.value = _extends({}, this.domNode.dataset);
-      event.event = e;
-      return event;
-    }
-  }], [{
-    key: "create",
-    value: function create(data) {
-      var node = _get(_getPrototypeOf(MentionBlot), "create", this).call(this);
-
-      var denotationChar = document.createElement("span");
-      denotationChar.className = "ql-mention-denotation-char";
-      denotationChar.innerHTML = data.denotationChar;
-      node.appendChild(denotationChar);
-      node.innerHTML += data.value;
-      return MentionBlot.setDataValues(node, data);
-    }
-  }, {
-    key: "setDataValues",
-    value: function setDataValues(element, data) {
-      var domNode = element;
-      Object.keys(data).forEach(function (key) {
-        domNode.dataset[key] = data[key];
-      });
-      return domNode;
-    }
-  }, {
-    key: "value",
-    value: function value(domNode) {
-      return domNode.dataset;
-    }
-  }]);
+          return function (e) {
+            var event = _this3.buildEvent('mention-hovered', e);
 
-  return MentionBlot;
-}(Embed);
+            window.dispatchEvent(event);
+            e.preventDefault();
+          };
+        }
+      }, {
+        key: "buildEvent",
+        value: function buildEvent(name, e) {
+          var event = new Event(name, {
+            bubbles: true,
+            cancelable: true
+          });
+          event.value = _extends({}, this.domNode.dataset);
+          event.event = e;
+          return event;
+        }
+      }], [{
+        key: "create",
+        value: function create(data) {
+          var node = _get(_getPrototypeOf(MentionBlot), "create", this).call(this);
+
+          var denotationChar = document.createElement("span");
+          denotationChar.className = "ql-mention-denotation-char";
+          denotationChar.innerHTML = data.denotationChar;
+          node.appendChild(denotationChar);
+          node.innerHTML += data.value;
+          return MentionBlot.setDataValues(node, data);
+        }
+      }, {
+        key: "setDataValues",
+        value: function setDataValues(element, data) {
+          var domNode = element;
+          Object.keys(data).forEach(function (key) {
+            domNode.dataset[key] = data[key];
+          });
+          return domNode;
+        }
+      }, {
+        key: "value",
+        value: function value(domNode) {
+          return domNode.dataset;
+        }
+      }]);
+
+      return MentionBlot;
+    }(Embed);
+
+    MentionBlot.blotName = "mention";
+    MentionBlot.tagName = "span";
+    MentionBlot.className = "mention";
+    Quill.register(MentionBlot);
 
-MentionBlot.blotName = "mention";
-MentionBlot.tagName = "span";
-MentionBlot.className = "mention";
-Quill.register(MentionBlot);
 
-var Mention = /*#__PURE__*/function () {
-  function Mention(quill, options) {
     var _this = this;
 
     _classCallCheck(this, Mention);
@@ -434,6 +435,7 @@ var Mention = /*#__PURE__*/function () {
     //is in progress.
 
     this.existingSourceExecutionToken = null;
+    this.lastTextSourceCall = null;
     this.quill = quill;
     this.options = {
       source: null,
@@ -544,8 +546,7 @@ var Mention = /*#__PURE__*/function () {
     key: "selectHandler",
     value: function selectHandler() {
       if (this.isOpen && !this.existingSourceExecutionToken) {
-        this.selectItem();
-        return false;
+        return !this.selectItem();
       }
 
       return true;
@@ -663,19 +664,23 @@ var Mention = /*#__PURE__*/function () {
       var _this2 = this;
 
       if (this.itemIndex === -1) {
-        return;
+        return false;
       }
 
       var data = this.getItemData();
 
       if (data.disabled) {
-        return;
+        this.hideMentionList();
+
+        return false;
       }
 
       this.options.onSelect(data, function (asyncData) {
         _this2.insertItem(asyncData);
       });
       this.hideMentionList();
+
+      return true;
     }
   }, {
     key: "insertItem",
@@ -817,7 +822,10 @@ var Mention = /*#__PURE__*/function () {
           }
 
           li.dataset.denotationChar = mentionChar;
-          this.mentionList.appendChild(attachDataValues(li, data[i], this.options.dataAttributes));
+
+          if (!this.options.disableRenderList) {
+            this.mentionList.appendChild(attachDataValues(li, data[i], this.options.dataAttributes));
+          }
         }
 
         this.itemIndex = initialSelection;
@@ -1087,7 +1095,9 @@ var Mention = /*#__PURE__*/function () {
       var _this5 = this;
 
       var range = this.quill.getSelection();
-      if (range == null) return;
+      if (range == null) {
+        return;
+      };
       this.cursorPos = range.index;
       var textBeforeCursor = this.getTextBeforeCursor();
 
@@ -1105,6 +1115,14 @@ var Mention = /*#__PURE__*/function () {
             this.existingSourceExecutionToken.abandoned = true;
           }
 
+          if (this.lastTextSourceCall === textAfter) {
+            this.hideMentionList();
+            this.existingSourceExecutionToken = null;
+            this.lastTextSourceCall = null;
+
+            return;
+          }
+
           this.renderLoading();
           var sourceRequestToken = {
             abandoned: false
@@ -1115,6 +1133,7 @@ var Mention = /*#__PURE__*/function () {
               return;
             }
 
+            _this5.lastTextSourceCall = textAfter;
             _this5.existingSourceExecutionToken = null;
 
             _this5.renderList(mentionChar, data, searchTerm);
@@ -1172,6 +1191,4 @@ var Mention = /*#__PURE__*/function () {
   return Mention;
 }();
 
-Quill.register("modules/mention", Mention);
-
 export { Mention as default };
